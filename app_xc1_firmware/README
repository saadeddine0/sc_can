This application contains the implementation of the demo CAN controller on
the XC-1. The XC-1 card must have two CAN transceiver chips on it, connected
to ports 1A, 1B, 1C and 1D on core0.

The demo shows two CAN controller threads running, each doing both RX and TX.

This demo has a number of threads running:
Core 0:
  - CAN PHY 1
  - CAN PHY 2
  - LED controller
  
Core 1:
  - CAN PHY tester 1
  - CAN PHY tester 2
  - Test controller

The test controller makes requests to the PHY testers to send packets. It
randomly either sends one or two packets simultaneously and waits for all
packets to be completed.

The PHY tester threads are responsible for creating random packets and
sending them on to the PHY themselves. They then also pass back acknowledges
to the controller whenever their PHY receives a packet. They wait with a
random thread ready to send to maximise the chances of collisions between the
two PHYs on the CAN bus.

The PHYs manage the physical interface with the transceiver. They perform
error checking, CRC calculations, synchronisation as required by the spec.
They must pass their timing constraints as specified in the script.xta,
otherwise they will fail.

NOTE: There is one failing path which has not yet been able to meet timing.
The path "startRx to sendError" is currently failing by ~150ns, when it
should complete in 320ns. Not sure whether this would be acceptable in a
real-world situation.

The LED controller is used by the master controller and the two PHY
tester threads. Each thread sends 4-bit values to the LED controller to
indicate how many packets have been sent/received. The counter is
divided by a large number in order to make the flashing visible.
